apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'maven'

dependencies {
    // support-v4 and appcompat-v7 are optional for backwards compatibility
    // This should be 'provided' scope, however there is a bug with the Android Gradle
    // plugin so instead the dependency is filtered out from the POM
    // https://code.google.com/p/android/issues/detail?id=68316
    implementation group:'com.android.support', name:'appcompat-v7', version:"28.0.0"
    implementation group:'com.android.support', name:'support-v4', version:"28.0.0"
    implementation 'com.google.android:android-test:4.1.1.4'
    implementation group:'net.jcip', name:'jcip-annotations', version:"1.0"
    implementation group:'com.android.support', name:'support-annotations', version:"]25.0.0,26["
    androidTestImplementation group:'com.android.support.test.espresso', name:'espresso-core', version:"3.0.2"
    androidTestImplementation group:'com.android.support.test.espresso', name:'espresso-intents', version:"3.0.2"
    testImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'junit:junit:4.12'


}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    resourcePrefix 'com_twofortyfouram_locale_sdk_client_'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 6
        versionName '4.0.3'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-consumer.txt'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            // Obfuscation is enabled to cleanup classes declared public
            // but which are considered internal APIs
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt'
        }
    }
}

android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        def androidHome = System.getenv('ANDROID_HOME')
        source = variant.javaCompile.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += variant.javaCompile.classpath
        classpath += variant.javaCompile.outputs.files
        options.linksOffline('https://developer.android.com/reference/', "${androidHome}/docs/reference")
        options.links('http://jcip.net.s3-website-us-east-1.amazonaws.com/annotations/doc/', 'https://twofortyfouram.github.io/android-annotation/', 'https://twofortyfouram.github.io/android-plugin-api-for-locale/')
        exclude '**/R.java'
        exclude 'com/twofortyfouram/locale/sdk/client/internal/**'
    }
}

// Java8 fails the build because of an error with Javadoc involving formatting. Prevent this (for Travis CI)
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

group = 'com.twofortyfouram'
archivesBaseName = 'android-plugin-client-sdk-for-locale'
version = '4.0.3'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://api.bintray.com/maven/twofortyfouram/maven/android-plugin-client-sdk-for-locale') {
                authentication(userName: '', password: '')
            }
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
            // Exclude support.v4 & appcompat-v7, making them optional dependencies
            pom.whenConfigured { pom -> pom.dependencies.removeAll {dep -> dep.groupId == 'com.android.support' && (dep.artifactId == 'support-v4' || dep.artifactId == 'appcompat-v7') } }
        }
    }
}
// Workaround for naming conflict between maven and android plugins
// http://stackoverflow.com/questions/18559932/gradle-maven-plugin-install-task-does-not-work-with-android-library-project
task installArchives(type: Upload) {
    description "Installs artifacts to mavenLocal."
    repositories.mavenInstaller {
        configuration = configurations.default
        // Exclude support.v4 & appcompat-v7, making them optional dependencies
        pom.whenConfigured { pom -> pom.dependencies.removeAll {dep -> dep.groupId == 'com.android.support' && (dep.artifactId == 'support-v4' || dep.artifactId == 'appcompat-v7') } }
    }
}

// Generates the JavaDoc as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier = 'javadoc'
        from tasks["${variant.name}Javadoc"].destinationDir
    }
 
    project.artifacts.add('archives', tasks["${variant.name}JavadocJar"]);
}


// Generates the source as a JAR for uploading an artifact
android.libraryVariants.all { variant ->
    task("${variant.name}SourceJar", type: Jar) {
        classifier = 'sources'
        from variant.javaCompile.source
    }
 
    project.artifacts.add('archives', tasks["${variant.name}SourceJar"]);
}

task findbugs(type: FindBugs, dependsOn: ':pluginClientSdkLib:compileReleaseSources') {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/release/')
    source = fileTree('src/main/java/')
    classpath = files()
    excludeFilter = file("$rootProject.projectDir/tools/findbugs/android-filter.xml")
    effort = 'max'
    reportLevel = 'low'
    reports {
        // Only one report type can be enabled at a time, apparently.
        xml.enabled = false
        html.enabled = true
        html.destination = "$project.buildDir/outputs/reports/findbugs/findbugs.html"
    }
}
